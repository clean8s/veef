import fs from "fs"
import {fileURLToPath} from "url"
import {parse, dirname, join as pathJoin} from "path"

const OUTPUT = `src/showcase/autogenerated.tsx`
const SHOWCASE_PREAMBLE = `/*
 * This file is autogenerated from vite
 * via autoimport.js
 * 
 * It contains all components from src/
*/
`
const SHOWCASE_CODE = (file, i) => `import "../${parse(file).name}"`

function getThisDir() {
    return dirname(fileURLToPath(import.meta.url))
}

export {getThisDir, pathJoin}

const thisDir = getThisDir()

export default {
    name: "autoimport-plugin",
    transformIndexHtml: {
        transform: (code, ctx) => {
            return code.replace(`type="module" crossorigin`, "")
        },
    },
    buildStart() {
        this.lastCode = ""
        let hook = () => {
            const files = fs.readdirSync(`${thisDir}/src`).filter(x => {
                return x.endsWith(".tsx")
            }).map(SHOWCASE_CODE)
            const code = SHOWCASE_PREAMBLE + files.join("\n")
            if(code === this.lastCode) {
                return;
            }
            fs.writeFileSync(`${thisDir}/${OUTPUT}`, code)
            this.lastCode = code;
        }
        hook()
        this.interval = setInterval(hook, 300)

    },
    buildEnd() {
        clearInterval(this.interval)
    }
}